Q1. What happens when you initialize a repository? Why do you need to do it?
I guess the entire setup necessary for git to work takes place.


Q2. How is the staging area different from the working directory and the repository? What value do you think it offers?
A working directory should contain all the files that we are working on, even the ones we don't want to commit or keep track of.
A repository is a set of all our commits unlike a staging area which is a temporary place to form a single commit. Once, we feel that a commit is good enough, we move it from the staging area to the repository.


Q3. How can you use the staging area to make sure you have one commit per logical change?
By only adding those modified files that make one logical change.


Q4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branching would be very helpful to try out experimental features or customizing the project for different scenarios.
Branches would help by keeping the working code separate from the experimental code.


Q5. How do the diagrams help you visualize the branch structure?
By making it easy to see which commits are reachable and which are not.


Q6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Result is the code that has all the work done in the two branches. We represent them that way because it makes it easier to visualize.


Q7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros:
1. Saves time and hassles
Cons:
1. Chance for making the code bulky and repititive.